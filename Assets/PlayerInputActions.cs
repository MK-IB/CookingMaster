//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""72371060-83d3-41f3-97c3-29f49a65e601"",
            ""actions"": [
                {
                    ""name"": ""Move A"",
                    ""type"": ""Value"",
                    ""id"": ""c789ad6a-11da-4800-a5ed-a4d7df8cd04e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move B"",
                    ""type"": ""Value"",
                    ""id"": ""c6d33dfc-1150-4201-96ca-455d4fc78a50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractA"",
                    ""type"": ""Button"",
                    ""id"": ""9aa109b3-a19b-469b-a092-98bc36a538c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractB"",
                    ""type"": ""Button"",
                    ""id"": ""b2d93a2a-f613-4311-9cd6-10b9ee4295e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e335ba18-0d96-47d1-9ba0-ba9701469fb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move A"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""800e47a0-a60a-4ae9-b064-06f425cc3a32"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""02f0f304-3043-48ef-9f6c-42e0ae44bf84"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a44fb1dc-9c17-48f4-b6dc-994e108ed230"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6ca8c8f4-7859-4b7d-acfc-495738c66c56"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d91f6a41-c4b7-461f-9dec-b73d72bef901"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""4488dfce-7fd3-41fa-91ce-b790a9e65d48"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move B"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7735b6ef-bce3-41fe-81ea-6d4c4a24c4e6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ae96bc9f-b397-4bc9-be98-884db6d77d9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""51c00110-2593-4385-a6cf-3f729c1d56f9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""551f9cd5-0f80-4530-a6ed-732a5848f3e0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""57e22def-e0b3-4b87-8a85-112ca4945588"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MoveA = m_Player.FindAction("Move A", throwIfNotFound: true);
        m_Player_MoveB = m_Player.FindAction("Move B", throwIfNotFound: true);
        m_Player_InteractA = m_Player.FindAction("InteractA", throwIfNotFound: true);
        m_Player_InteractB = m_Player.FindAction("InteractB", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MoveA;
    private readonly InputAction m_Player_MoveB;
    private readonly InputAction m_Player_InteractA;
    private readonly InputAction m_Player_InteractB;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveA => m_Wrapper.m_Player_MoveA;
        public InputAction @MoveB => m_Wrapper.m_Player_MoveB;
        public InputAction @InteractA => m_Wrapper.m_Player_InteractA;
        public InputAction @InteractB => m_Wrapper.m_Player_InteractB;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MoveA.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveA;
                @MoveA.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveA;
                @MoveA.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveA;
                @MoveB.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveB;
                @MoveB.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveB;
                @MoveB.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveB;
                @InteractA.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractA;
                @InteractA.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractA;
                @InteractA.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractA;
                @InteractB.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractB;
                @InteractB.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractB;
                @InteractB.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteractB;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveA.started += instance.OnMoveA;
                @MoveA.performed += instance.OnMoveA;
                @MoveA.canceled += instance.OnMoveA;
                @MoveB.started += instance.OnMoveB;
                @MoveB.performed += instance.OnMoveB;
                @MoveB.canceled += instance.OnMoveB;
                @InteractA.started += instance.OnInteractA;
                @InteractA.performed += instance.OnInteractA;
                @InteractA.canceled += instance.OnInteractA;
                @InteractB.started += instance.OnInteractB;
                @InteractB.performed += instance.OnInteractB;
                @InteractB.canceled += instance.OnInteractB;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMoveA(InputAction.CallbackContext context);
        void OnMoveB(InputAction.CallbackContext context);
        void OnInteractA(InputAction.CallbackContext context);
        void OnInteractB(InputAction.CallbackContext context);
    }
}
